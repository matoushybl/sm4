initSidebarItems({"attr":[["global_logger","Defines the global defmt logger."],["panic_handler","Overrides the panicking behavior of `defmt::panic!`"],["timestamp","Defines the global timestamp provider for defmt."]],"fn":[["Debug2Format","`Debug2Format` constructor"],["Display2Format","`Display2Format` constructor."]],"macro":[["assert","Just like the `core::assert!` macro but `defmt` is used to log the panic message"],["assert_eq","Just like the `core::assert_eq!` macro but `defmt` is used to log the panic message"],["assert_ne","Just like the `core::assert_ne!` macro but `defmt` is used to log the panic message"],["debug","Logs data at debug level."],["debug_assert","Just like the `core::debug_assert!` macro but `defmt` is used to log the panic message"],["debug_assert_eq","Just like the `core::debug_assert_eq!` macro but `defmt` is used to log the panic message"],["debug_assert_ne","Just like the `core::debug_assert_ne!` macro but `defmt` is used to log the panic message"],["error","Logs data at error level."],["info","Logs data at info level."],["intern","Creates an interned string (`Str`) from a string literal."],["panic","Just like the `core::panic!` macro but `defmt` is used to log the panic message"],["todo","Just like the `core::todo!` macro but `defmt` is used to log the panic message"],["trace","Logs data at trace level."],["unimplemented","Just like the `core::unimplemented!` macro but `defmt` is used to log the panic message"],["unreachable","Just like the `core::unreachable!` macro but `defmt` is used to log the panic message"],["unwrap","Unwraps an `Option` or `Result`, panicking if it is `None` or `Err`."],["warn","Logs data at warn level."],["write","Writes formatted data to a `Formatter`."]],"mod":[["consts","Type aliases for many constants."]],"struct":[["Debug2Format","An \"adapter\" type to feed `Debug` values into defmt macros, which expect `defmt::Format` values"],["Display2Format","An \"adapter\" type to feed `Display` values into defmt macros, which expect `defmt::Format` values."],["Formatter","Handle to a defmt logger."],["Str","An interned string created via `intern!`."]],"trait":[["Format","Derivable trait for defmt output."],["Logger","Global logger acquire-release mechanism"],["Write","Trait for defmt logging targets."]]});