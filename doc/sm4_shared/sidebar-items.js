initSidebarItems({"enum":[["Direction","This enum represents the direction where the motor is turning."]],"struct":[["Driver",""],["Motor1","Marker struct denoting the first motor. The struct is meant to be used in trait implementations to provide extra level of type safety."],["Motor2","Marker struct denoting the second motor. The struct is meant to be used in trait implementations to provide extra level of type safety."]],"trait":[["CurrentReference","Defines a shared interface for methods of setting motor current, be it inbuilt DAC or external one or something completely different. The `M` parameter is used to distinguish between motors, providing additional type safety."],["DirectionController","The `DirectionController` interface specifies a way of controlling direction where the motor is turning. /// The `M` parameter is used to distinguish between motors, providing additional type safety."],["StepCounter",""],["StepGenerator","Defines a shared interface for working with systems that generates steps that control the stepper motors. The stepper generator can be PWM or manual toggling of an output pin. It is worth noting that the API works directly with step frequency, not microstep frequency, to be independent on microstepping. The `M` parameter is used to distinguish between motors, providing additional type safety."],["StepperDriver",""]]});