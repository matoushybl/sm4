(function() {var implementors = {};
implementors["main"] = [{"text":"impl Freeze for Schedule","synthetic":true,"types":[]},{"text":"impl !Freeze for initLateResources","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for mainResources&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for driver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for usb_handlerResources&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for dmaResources&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for can_handlerResources&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for blinkResources&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Schedule&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for monitoringResources&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Schedule&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for sampleResources&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Schedule&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Context&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["sm4_firmware"] = [{"text":"impl Freeze for GPIO","synthetic":true,"types":[]},{"text":"impl Freeze for CANOpen","synthetic":true,"types":[]},{"text":"impl Freeze for CANOpenMessage","synthetic":true,"types":[]},{"text":"impl&lt;CH&gt; Freeze for CurrentDACChannel&lt;CH&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CH: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DriverState","synthetic":true,"types":[]},{"text":"impl&lt;D1, D2, E1, E2&gt; Freeze for DualAxisDriver&lt;D1, D2, E1, E2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;D2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;E1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;E2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for LEDs","synthetic":true,"types":[]},{"text":"impl Freeze for Monitoring","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectDictionary","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for StepCounterEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for StepGeneratorTimer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for USBProtocol","synthetic":true,"types":[]},{"text":"impl !Freeze for SM4","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()