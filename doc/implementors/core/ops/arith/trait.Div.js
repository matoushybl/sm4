(function() {var implementors = {};
implementors["chrono"] = [{"text":"impl Div&lt;i32&gt; for Duration","synthetic":false,"types":[]}];
implementors["embedded_time"] = [{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Hours&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Minutes&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Seconds&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Milliseconds&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Microseconds&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Nanoseconds&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;Fraction&gt; for u32","synthetic":false,"types":[]},{"text":"impl Div&lt;Fraction&gt; for u64","synthetic":false,"types":[]},{"text":"impl Div&lt;Fraction&gt; for Fraction","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Mebihertz&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Megahertz&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Kibihertz&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Kilohertz&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Hertz&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for MebibytesPerSecond&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for MegabytesPerSecond&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for KibibytesPerSecond&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for KilobytesPerSecond&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for BytesPerSecond&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for MebibitsPerSecond&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for MegabitsPerSecond&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for KibibitsPerSecond&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for KilobitsPerSecond&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for BitsPerSecond&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Mebibaud&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Megabaud&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Kibibaud&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Kilobaud&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;TimeInt&gt; Div&lt;T&gt; for Baud&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Num&gt; Div&lt;&amp;'b Complex&lt;T&gt;&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Div&lt;Complex&lt;T&gt;&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Div&lt;&amp;'a Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Num&gt; Div&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Num&gt; Div&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Div&lt;&amp;'a T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Div&lt;T&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Num&gt; Div&lt;&amp;'a T&gt; for &amp;'b Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;usize&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;usize&gt;&gt; for &amp;'a usize","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;usize&gt;&gt; for &amp;'b usize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;u8&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;u8&gt;&gt; for &amp;'a u8","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;u8&gt;&gt; for &amp;'b u8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;u16&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;u16&gt;&gt; for &amp;'a u16","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;u16&gt;&gt; for &amp;'b u16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;u32&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;u32&gt;&gt; for &amp;'a u32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;u32&gt;&gt; for &amp;'b u32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;u64&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;u64&gt;&gt; for &amp;'a u64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;u64&gt;&gt; for &amp;'b u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;u128&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;u128&gt;&gt; for &amp;'a u128","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;u128&gt;&gt; for &amp;'b u128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;isize&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;isize&gt;&gt; for &amp;'a isize","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;isize&gt;&gt; for &amp;'b isize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;i8&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;i8&gt;&gt; for &amp;'a i8","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;i8&gt;&gt; for &amp;'b i8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;i16&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;i16&gt;&gt; for &amp;'a i16","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;i16&gt;&gt; for &amp;'b i16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;i32&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;i32&gt;&gt; for &amp;'a i32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;i32&gt;&gt; for &amp;'b i32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;i64&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;i64&gt;&gt; for &amp;'a i64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;i64&gt;&gt; for &amp;'b i64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;i128&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;i128&gt;&gt; for &amp;'a i128","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;i128&gt;&gt; for &amp;'b i128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;f32&gt;&gt; for &amp;'a f32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;f32&gt;&gt; for &amp;'b f32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;&amp;'a Complex&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Div&lt;Complex&lt;f64&gt;&gt; for &amp;'a f64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Div&lt;&amp;'a Complex&lt;f64&gt;&gt; for &amp;'b f64","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;usize&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;u8&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;u16&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;u32&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;u64&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;u128&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;isize&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;i8&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;i16&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;i32&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;i64&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;i128&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl Div&lt;Complex&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Div&lt;&amp;'b Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Div&lt;&amp;'b T&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Div&lt;Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Div&lt;T&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Div&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Div&lt;&amp;'a T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Div&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Div&lt;T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl&lt;I:&nbsp;Integer + NonZero&gt; Div&lt;I&gt; for Z0","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Div&lt;PInt&lt;Ur&gt;&gt; for PInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Cmp&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;PInt&lt;Ul&gt;: PrivateDivInt&lt;&lt;Ul as Cmp&lt;Ur&gt;&gt;::Output, PInt&lt;Ur&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Div&lt;NInt&lt;Ur&gt;&gt; for PInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Cmp&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;PInt&lt;Ul&gt;: PrivateDivInt&lt;&lt;Ul as Cmp&lt;Ur&gt;&gt;::Output, NInt&lt;Ur&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Div&lt;PInt&lt;Ur&gt;&gt; for NInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Cmp&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;NInt&lt;Ul&gt;: PrivateDivInt&lt;&lt;Ul as Cmp&lt;Ur&gt;&gt;::Output, PInt&lt;Ur&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Div&lt;NInt&lt;Ur&gt;&gt; for NInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Cmp&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;NInt&lt;Ul&gt;: PrivateDivInt&lt;&lt;Ul as Cmp&lt;Ur&gt;&gt;::Output, NInt&lt;Ur&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ur:&nbsp;Unsigned, Br:&nbsp;Bit&gt; Div&lt;UInt&lt;Ur, Br&gt;&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, Bl:&nbsp;Bit, Ur:&nbsp;Unsigned, Br:&nbsp;Bit&gt; Div&lt;UInt&lt;Ur, Br&gt;&gt; for UInt&lt;Ul, Bl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;UInt&lt;Ul, Bl&gt;: Len,<br>&nbsp;&nbsp;&nbsp;&nbsp;Length&lt;UInt&lt;Ul, Bl&gt;&gt;: Sub&lt;B1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;(): PrivateDiv&lt;UInt&lt;Ul, Bl&gt;, UInt&lt;Ur, Br&gt;, U0, U0, Sub1&lt;Length&lt;UInt&lt;Ul, Bl&gt;&gt;&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Rhs&gt; Div&lt;Rhs&gt; for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V, A, Rhs&gt; Div&lt;Rhs&gt; for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Div&lt;Rhs&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Div&lt;Rhs&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rhs: Copy,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()